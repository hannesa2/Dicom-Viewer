apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

android {
    compileSdkVersion defaultCompileSdkVersion

    defaultConfig {
        applicationId "info.hannes.dicom.app"
        minSdkVersion defaultMinSdkVersion
        targetSdkVersion defaultTargetSdkVersion

        versionCode getGitCommitCount()
        versionName getTag()
        buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""
    }

    signingConfigs {
        release {
            storeFile file('../signing/release.keystore')
            storePassword System.getenv("KEYSTORE_PASS")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASS")
        }
        debug {
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (System.getenv("CI_SERVER")) { // gitlab
                println "I run on Gitlab and use RELEASE signing"
                signingConfig signingConfigs.release
            } else if (file('../signing/release.keystore').exists()) {
                if (System.getenv("KEYSTORE_PASS") == null || System.getenv("ALIAS_NAME") == null || System.getenv("ALIAS_PASS") == null) {
                    println "I run somewhere else and I use DEBUG signing because variables are not set !"
                    signingConfig signingConfigs.debug
                } else {
                    println "I run somewhere else and I use RELEASE signing"
                    signingConfig signingConfigs.release
                }
            } else {
                println "I run somewhere else and I use debug signing"
                signingConfig signingConfigs.debug
            }
        }
        debug {
            if (System.getenv("CI") == "true") { // Github action
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }
    }
    lint {
        disable 'MissingTranslation'
    }
    namespace 'info.hannes.dicom.app'

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.name == "release") {
                def builtType = variant.buildType.name
                def vName = variant.versionName
                def vCode = variant.versionCode
                // def flavor = variant.flavorName
                def newName = "Dicom"
                newName += "-${vName}-${vCode}-${builtType}.apk"
                outputFileName = newName
            }
            println "$variant.name: name is $outputFileName"
        }
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'net.rdrei.android.dirchooser:library:2.1@aar'
    implementation files('libs/imebra_android.jar')
    implementation project(':libraries:aFileChooser')
    implementation 'junit:junit:4.13.2'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.github.amlcurran.showcaseview:library:5.4.3'
    implementation 'com.github.hannesa2:githubAppUpdate:1.6'
    implementation 'androidx.core:core-ktx:1.9.0'
}

static def getGitOriginRemote() {
    def process = "git remote -v".execute()
    def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

    def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
    return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getTag() {
    def process = "git describe --tags".execute()
    return process.text.toString().trim()
}
